"""
python scan_config.py NBOARDS CONFIG
"""
import os 
import sys
import time

from gui import GUI

def main():

    # user inputs
    if len(sys.argv) < 3:
        sys.exit("Fatal: please follow this format: python jonah_config.py NBOARDS CONFIG")
    if not os.path.isfile(sys.argv[2]):
        sys.exit("Fatal: %s is not a file. Exiting." % (sys.argv[2]))
    execfile(sys.argv[2], globals())
    if not len(cfgs)==int(sys.argv[1]):
        sys.exit("Fatal: the number of configs in %s (%s) doesnt match the number of configs on the command line (%s)"
                 % (sys.argv[2], len(cfgs), sys.argv[1]))

    # startup
    gui       = GUI()
    start     = time.time()
    nvmms     = 8
    nchannels = 64
    pulsetime = 20
    output    = open("scan_config.txt", "w")

    tracks = []

    tracks = [
        [(123,0,24),(125,7,41),(109,7,48),(106,0,30),(126,7,48),(122,0,30),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,56),(106,0,38),(126,7,56),(122,0,38),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,40),(106,0,22),(126,7,40),(122,0,22),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,48),(106,0,38),(126,7,48),(122,0,38),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,40),(106,0,30),(126,7,40),(122,0,30),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,56),(106,0,46),(126,7,56),(122,0,46),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,32),(106,0,22),(126,7,32),(122,0,22),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,48),(106,0,22),(126,7,48),(122,0,22),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,56),(106,0,30),(126,7,56),(122,0,30),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,40),(106,0,14),(126,7,40),(122,0,14),(124,0,24),(119,7,41)],
        [(123,0,24),(125,7,41),(109,7,64),(106,0,38),(126,7,64),(122,0,38),(124,0,24),(119,7,41)],
        [(123,1,24),(125,6,41),(109,6,48),(106,1,30),(126,6,48),(122,1,30),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,56),(106,1,38),(126,6,56),(122,1,38),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,40),(106,1,22),(126,6,40),(122,1,22),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,48),(106,1,38),(126,6,48),(122,1,38),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,40),(106,1,30),(126,6,40),(122,1,30),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,56),(106,1,46),(126,6,56),(122,1,46),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,32),(106,1,22),(126,6,32),(122,1,22),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,48),(106,1,22),(126,6,48),(122,1,22),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,56),(106,1,30),(126,6,56),(122,1,30),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,40),(106,1,14),(126,6,40),(122,1,14),(124,1,24),(119,6,41)],
        [(123,1,24),(125,6,41),(109,6,64),(106,1,38),(126,6,64),(122,1,38),(124,1,24),(119,6,41)],
        [(123,2,24),(125,5,41),(109,5,48),(106,2,30),(126,5,48),(122,2,30),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,56),(106,2,38),(126,5,56),(122,2,38),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,40),(106,2,22),(126,5,40),(122,2,22),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,48),(106,2,38),(126,5,48),(122,2,38),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,40),(106,2,30),(126,5,40),(122,2,30),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,56),(106,2,46),(126,5,56),(122,2,46),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,32),(106,2,22),(126,5,32),(122,2,22),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,48),(106,2,22),(126,5,48),(122,2,22),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,56),(106,2,30),(126,5,56),(122,2,30),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,40),(106,2,14),(126,5,40),(122,2,14),(124,2,24),(119,5,41)],
        [(123,2,24),(125,5,41),(109,5,64),(106,2,38),(126,5,64),(122,2,38),(124,2,24),(119,5,41)],
        [(123,3,24),(125,4,41),(109,4,48),(106,3,30),(126,4,48),(122,3,30),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,56),(106,3,38),(126,4,56),(122,3,38),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,40),(106,3,22),(126,4,40),(122,3,22),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,48),(106,3,38),(126,4,48),(122,3,38),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,40),(106,3,30),(126,4,40),(122,3,30),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,56),(106,3,46),(126,4,56),(122,3,46),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,32),(106,3,22),(126,4,32),(122,3,22),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,48),(106,3,22),(126,4,48),(122,3,22),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,56),(106,3,30),(126,4,56),(122,3,30),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,40),(106,3,14),(126,4,40),(122,3,14),(124,3,24),(119,4,41)],
        [(123,3,24),(125,4,41),(109,4,64),(106,3,38),(126,4,64),(122,3,38),(124,3,24),(119,4,41)],
        [(123,4,24),(125,3,41),(109,3,48),(106,4,30),(126,3,48),(122,4,30),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,56),(106,4,38),(126,3,56),(122,4,38),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,40),(106,4,22),(126,3,40),(122,4,22),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,48),(106,4,38),(126,3,48),(122,4,38),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,40),(106,4,30),(126,3,40),(122,4,30),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,56),(106,4,46),(126,3,56),(122,4,46),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,32),(106,4,22),(126,3,32),(122,4,22),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,48),(106,4,22),(126,3,48),(122,4,22),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,56),(106,4,30),(126,3,56),(122,4,30),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,40),(106,4,14),(126,3,40),(122,4,14),(124,4,24),(119,3,41)],
        [(123,4,24),(125,3,41),(109,3,64),(106,4,38),(126,3,64),(122,4,38),(124,4,24),(119,3,41)],
        [(123,5,24),(125,2,41),(109,2,48),(106,5,30),(126,2,48),(122,5,30),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,56),(106,5,38),(126,2,56),(122,5,38),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,40),(106,5,22),(126,2,40),(122,5,22),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,48),(106,5,38),(126,2,48),(122,5,38),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,40),(106,5,30),(126,2,40),(122,5,30),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,56),(106,5,46),(126,2,56),(122,5,46),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,32),(106,5,22),(126,2,32),(122,5,22),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,48),(106,5,22),(126,2,48),(122,5,22),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,56),(106,5,30),(126,2,56),(122,5,30),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,40),(106,5,14),(126,2,40),(122,5,14),(124,5,24),(119,2,41)],
        [(123,5,24),(125,2,41),(109,2,64),(106,5,38),(126,2,64),(122,5,38),(124,5,24),(119,2,41)],
        [(123,6,24),(125,1,41),(109,1,48),(106,6,30),(126,1,48),(122,6,30),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,56),(106,6,38),(126,1,56),(122,6,38),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,40),(106,6,22),(126,1,40),(122,6,22),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,48),(106,6,38),(126,1,48),(122,6,38),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,40),(106,6,30),(126,1,40),(122,6,30),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,56),(106,6,46),(126,1,56),(122,6,46),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,32),(106,6,22),(126,1,32),(122,6,22),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,48),(106,6,22),(126,1,48),(122,6,22),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,56),(106,6,30),(126,1,56),(122,6,30),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,40),(106,6,14),(126,1,40),(122,6,14),(124,6,24),(119,1,41)],
        [(123,6,24),(125,1,41),(109,1,64),(106,6,38),(126,1,64),(122,6,38),(124,6,24),(119,1,41)],
        [(123,7,24),(125,0,41),(109,0,48),(106,7,30),(126,0,48),(122,7,30),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,56),(106,7,38),(126,0,56),(122,7,38),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,40),(106,7,22),(126,0,40),(122,7,22),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,48),(106,7,38),(126,0,48),(122,7,38),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,40),(106,7,30),(126,0,40),(122,7,30),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,56),(106,7,46),(126,0,56),(122,7,46),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,32),(106,7,22),(126,0,32),(122,7,22),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,48),(106,7,22),(126,0,48),(122,7,22),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,56),(106,7,30),(126,0,56),(122,7,30),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,40),(106,7,14),(126,0,40),(122,7,14),(124,7,24),(119,0,41)],
        [(123,7,24),(125,0,41),(109,0,64),(106,7,38),(126,0,64),(122,7,38),(124,7,24),(119,0,41)],
        ]

    # # scanning rows of diamonds
    # tracks = [ 
    #     # middle diamond
    #     [(123,0,24),(125,7,41),(109,7,48),(106,0,30),(126,7,48),(122,0,30),(124,0,24),(119,7,41)],
    #     # top diamonds
    #     [(123,0,24),(125,7,41),(109,7,48),(106,0,38),(126,7,48),(122,0,38),(124,0,24),(119,7,41)],
    #     [(123,0,24),(125,7,41),(109,7,40),(106,0,30),(126,7,40),(122,0,30),(124,0,24),(119,7,41)],
    #     [(123,0,24),(125,7,41),(109,7,56),(106,0,46),(126,7,56),(122,0,46),(124,0,24),(119,7,41)],
    #     [(123,0,24),(125,7,41),(109,7,32),(106,0,22),(126,7,32),(122,0,22),(124,0,24),(119,7,41)],
    #     # bottom diamonds
    #     [(123,0,24),(125,7,41),(109,7,48),(106,0,22),(126,7,48),(122,0,22),(124,0,24),(119,7,41)],
    #     [(123,0,24),(125,7,41),(109,7,56),(106,0,30),(126,7,56),(122,0,30),(124,0,24),(119,7,41)],
    #     [(123,0,24),(125,7,41),(109,7,40),(106,0,14),(126,7,40),(122,0,14),(124,0,24),(119,7,41)],
    #     [(123,0,24),(125,7,41),(109,7,64),(106,0,38),(126,7,64),(122,0,38),(124,0,24),(119,7,41)],
    #     ]

    # scanning diamonds in y
    # only i2=(-3,-2,-1,0,1,2,3) should make triggers if there are 7 diamonds per x-road
    # for i1 in range(1,4):
    #     n = i1*8
    #     tracks.append([(123,2,32),(125,5,33),(109,4,40+n),(106,1,38+n),(126,4,40+n),(122,1,38+n),(124,2,32),(119,5,33)])
    # for i2 in range(-4,4):
    #     n = i2*8
    #     tracks.append([(123,2,32),(125,5,33),(109,5,40+n),(106,2,38+n),(126,5,40+n),(122,2,38+n),(124,2,32),(119,5,33)])
    # for i3 in range(-4,-1):
    #     n = i3*8
    #     tracks.append([(123,2,32),(125,5,33),(109,6,40+n),(106,3,38+n),(126,6,40+n),(122,3,38+n),(124,2,32),(119,5,33)])

    # tracks = [ [(123,1,64),
    #             (125,6, 1), 
    #             (109,6, 4), #(109,5,60),
    #             (106,2, 2), #(106,1,58),
    #             (126,6, 4), #(126,5,60),
    #             (122,2, 2), #(122,1,58),
    #             (124,1,64),
    #             (119,6, 1),
    #             ] ] 


    # # ann's test
    # # these match beautifully
    # tracks = [[(123,3,40),(125,4,25),(109,4,32),(106,3,46),(126,4,32),(122,3,46),(124,3,40),(119,4,25)],
    #           [(123,3,40),(125,4,25),(109,4,36),(106,3,40),(126,4,36),(122,3,40),(124,3,40),(119,4,25)],
    #           [(123,3,40),(125,4,25),(109,4,28),(106,3,46),(126,4,28),(122,3,46),(124,3,40),(119,4,25)],
    #           [(123,3,40),(125,4,25),(109,4,26),(106,3,46),(126,4,26),(122,3,46),(124,3,40),(119,4,25)],
    #           [(123,3,40),(125,4,25),(109,4,32),(106,3,36),(126,4,32),(122,3,36),(124,3,40),(119,4,25)],
    #           ]


    # # ann's test
    # tracks = [#[(123,1,25),(125,6,40),(109,6,23),(106,1,7),(126,6,23),(122,1,7),(124,1,25),(119,6,40)],
    #            [(123,1,25),(125,6,40),(109,7,15),(106,1,63),(126,7,15),(122,1,63),(124,1,25),(119,6,40)],
    #           #[(123,1,25),(125,6,40),(109,6,15),(106,0,63),(126,6,15),(122,0,63),(124,1,25),(119,6,40)],
    #           #[(123,1,25),(125,6,40),(109,6,30),(106,1,15),(126,6,30),(122,1,15),(124,1,25),(119,6,40)],
    #           ]

    # # scanning strips in y
    # tracks = [[(123,1,12),(125,6,53),(109,6,57),(106,1,15),(126,6,57),(122,1,15),(124,1,12),(119,6,53)],
    #           [(123,1,12),(125,6,53),(109,6,58),(106,1,16),(126,6,58),(122,1,16),(124,1,12),(119,6,53)],
    #           [(123,1,12),(125,6,53),(109,6,59),(106,1,17),(126,6,59),(122,1,17),(124,1,12),(119,6,53)],
    #           [(123,1,12),(125,6,53),(109,6,60),(106,1,18),(126,6,60),(122,1,18),(124,1,12),(119,6,53)],
    #           [(123,1,12),(125,6,53),(109,6,61),(106,1,19),(126,6,61),(122,1,19),(124,1,12),(119,6,53)],
    #           [(123,1,12),(125,6,53),(109,6,62),(106,1,20),(126,6,62),(122,1,20),(124,1,12),(119,6,53)],
    #           [(123,1,12),(125,6,53),(109,6,63),(106,1,21),(126,6,63),(122,1,21),(124,1,12),(119,6,53)],
    #           ]

    # for i in [-6]:
    # #for i in range(-7,5):
    #     tracks.append( [#(123,0,25), 
    #             (123,1,25), #(123,2,25),
    #                     #(125,7,40), 
    #             (125,6,40), #(125,5,40),
    #                     #(109,7,47+i*4), 
    #             (109,6,47+i*4), #(109,5,47+i*4),
    #                     #(106,0,31+i*4), 
    #             (106,1,31+i*4), #(106,2,31+i*4),
    #                     #(126,7,47+i*4), 
    #             (126,6,47+i*4), #(126,5,47+i*4),
    #                     #(122,0,31+i*4), 
    #             (122,1,31+i*4), #(122,2,31+i*4),
    #                     #(124,0,25), 
    #             (124,1,25), #(124,2,25),
    #                     #(119,7,40), 
    #             (119,6,40), #(119,5,40),
    #                     ] )

    # tracks = [ # [(123,0,32),(125,7,33),(109,7,40),(106,0,38),(126,7,40),(122,0,38),(124,0,32),(119,7,33)],
    #            # [(123,1,32),(125,6,33),(109,6,40),(106,1,38),(126,6,40),(122,1,38),(124,1,32),(119,6,33)],
    #            # [(123,2,32),(125,5,33),(109,5,40),(106,2,38),(126,5,40),(122,2,38),(124,2,32),(119,5,33)],
    #            # [(123,3,32),(125,4,33),(109,4,40),(106,3,38),(126,4,40),(122,3,38),(124,3,32),(119,4,33)],
    #            # [(123,4,32),(125,3,33),(109,3,40),(106,4,38),(126,3,40),(122,4,38),(124,4,32),(119,3,33)],
    #            # [(123,5,32),(125,2,33),(109,2,40),(106,5,38),(126,2,40),(122,5,38),(124,5,32),(119,2,33)],
    #            # [(123,6,32),(125,1,33),(109,1,40),(106,6,38),(126,1,40),(122,6,38),(124,6,32),(119,1,33)],
    #            # [(123,7,32),(125,0,33),(109,0,40),(106,7,38),(126,0,40),(122,7,38),(124,7,32),(119,0,33)],
    #            # [(123,0,32),(125,7,33),(109,7,48),(106,0,46),(126,7,48),(122,0,46),(124,0,32),(119,7,33)],
    #            # [(123,1,32),(125,6,33),(109,6,48),(106,1,46),(126,6,48),(122,1,46),(124,1,32),(119,6,33)],
    #            # [(123,2,32),(125,5,33),(109,5,48),(106,2,46),(126,5,48),(122,2,46),(124,2,32),(119,5,33)],
    #            # [(123,3,32),(125,4,33),(109,4,48),(106,3,46),(126,4,48),(122,3,46),(124,3,32),(119,4,33)],
    #            # [(123,4,32),(125,3,33),(109,3,48),(106,4,46),(126,3,48),(122,4,46),(124,4,32),(119,3,33)],
    #            # [(123,5,32),(125,2,33),(109,2,48),(106,5,46),(126,2,48),(122,5,46),(124,5,32),(119,2,33)],
    #            # [(123,6,32),(125,1,33),(109,1,48),(106,6,46),(126,1,48),(122,6,46),(124,6,32),(119,1,33)],
    #            # [(123,7,32),(125,0,33),(109,0,48),(106,7,46),(126,0,48),(122,7,46),(124,7,32),(119,0,33)],

    #            [(123,0,32),(125,7,33),(109,7,40),(106,0,38),(126,7,40),(122,0,38),(124,0,32),(119,7,33)],
    #            [(123,0,33),(125,7,32),(109,7,39),(106,0,39),(126,7,39),(122,0,39),(124,0,33),(119,7,32)],
    #            [(123,0,34),(125,7,31),(109,7,38),(106,0,40),(126,7,38),(122,0,40),(124,0,34),(119,7,31)],
    #            [(123,0,35),(125,7,30),(109,7,37),(106,0,41),(126,7,37),(122,0,41),(124,0,35),(119,7,30)],
    #            [(123,0,36),(125,7,29),(109,7,36),(106,0,42),(126,7,36),(122,0,42),(124,0,36),(119,7,29)],
    #            [(123,0,37),(125,7,28),(109,7,35),(106,0,43),(126,7,35),(122,0,43),(124,0,37),(119,7,28)],
    #            [(123,0,38),(125,7,27),(109,7,34),(106,0,44),(126,7,34),(122,0,44),(124,0,38),(119,7,27)],
    #            [(123,0,39),(125,7,26),(109,7,33),(106,0,45),(126,7,33),(122,0,45),(124,0,39),(119,7,26)],
    #            [(123,0,40),(125,7,25),(109,7,32),(106,0,46),(126,7,32),(122,0,46),(124,0,40),(119,7,25)],
    #            [(123,0,41),(125,7,24),(109,7,31),(106,0,47),(126,7,31),(122,0,47),(124,0,41),(119,7,24)],
    #            [(123,0,42),(125,7,23),(109,7,30),(106,0,48),(126,7,30),(122,0,48),(124,0,42),(119,7,23)],
    #            [(123,0,43),(125,7,22),(109,7,29),(106,0,49),(126,7,29),(122,0,49),(124,0,43),(119,7,22)],
    #            [(123,0,44),(125,7,21),(109,7,28),(106,0,50),(126,7,28),(122,0,50),(124,0,44),(119,7,21)],
    #            [(123,0,45),(125,7,20),(109,7,27),(106,0,51),(126,7,27),(122,0,51),(124,0,45),(119,7,20)],
    #            [(123,0,46),(125,7,19),(109,7,26),(106,0,52),(126,7,26),(122,0,52),(124,0,46),(119,7,19)],
    #            [(123,0,47),(125,7,18),(109,7,25),(106,0,53),(126,7,25),(122,0,53),(124,0,47),(119,7,18)],
    #            [(123,0,48),(125,7,17),(109,7,24),(106,0,54),(126,7,24),(122,0,54),(124,0,48),(119,7,17)],
    #            [(123,0,49),(125,7,16),(109,7,23),(106,0,55),(126,7,23),(122,0,55),(124,0,49),(119,7,16)],
    #            [(123,0,50),(125,7,15),(109,7,22),(106,0,56),(126,7,22),(122,0,56),(124,0,50),(119,7,15)],
    #            [(123,0,51),(125,7,14),(109,7,21),(106,0,57),(126,7,21),(122,0,57),(124,0,51),(119,7,14)],
    #            ]

    # batch mode
    gui.window.hide()

    # loop over tracks
    for itr,track in enumerate(tracks):

        # disable external pulse
        set_external_pulses(gui, cfgs, "off")
        print "Pulses off."
        time.sleep(2)

        # config
        for cfg in cfgs:
            update_config(cfg, track)
            newcal(gui, cfg.i, cfg.vmmis, cfg.ThresholdDACs, cfg.TestPulseDAC, cfg.PeakingTime,
                   cfg.SM, cfg.ST, cfg.EnableReadout, cfg.ConfigureLoad, 
                   cfg.ip, cfg.ExternalTrigger, cfg.isExtPulseTrig, cfg.mon)
        print "Configured."
        time.sleep(2)

        # enable external pulse
        output.write("TIME: %f Track: %s\n" % (time.time()*pow(10, 9), str(track).replace(" ", "") ))
        output.flush()
        os.fsync(output.fileno())
        set_external_pulses(gui, cfgs, "on")

        # run with pulsing
        print "Pausing for pulsing."
        time.sleep(pulsetime)

    # disable external pulse
    set_external_pulses(gui, cfgs, "off")
    print "Pulses off."
    
    # end
    end   = time.time()
    delta = int(end-start)
    print "Configuration time: %sm%ss" % (delta/60, delta%60)
    output.write("TIME: %f End tracks\n" % (time.time()*pow(10, 9)))
    output.close()

def set_external_pulses(gui, cfgs, status):
    if not status in ["on", "off"]:
        fatal("Need to set on or off: you gave %s" % (status))
    for cfg in cfgs:
        time.sleep(0.001)
        set_mmfe(gui, cfg)
        for mmfe in gui.current_MMFEs():
            val = 1 if status == "on" else 0
            mmfe.readout_runlength[26] = val
            mmfe.write_readout_runlength()
            message = "w 0x44A1013C %s" % (val)
            mmfe.udp.udp_client(message, mmfe.UDP_IP, mmfe.UDP_PORT)

def set_mmfe(gui, cfg):
    colors = ["", palette.BLUE, palette.GREEN, palette.RED]
    gui.combo_mmfe_number.set_active(cfg.i)
    gui.set_current_mmfe(gui.combo_mmfe_number)
    gui.entry_ip.set_text("192.168.0." + str(cfg.ip))
    gui.set_ip(gui.entry_ip)
    text = "Board %s :: [%s / %s]" % (str(cfg.ip), cfg.i + 1, len(gui.MMFEs))
    color = colors[cfg.i % len(colors)]
    mmfe  = color+palette.BOLD+text+palette.END
    announce(" %s with VMMs %s" % (mmfe, cfg.vmmis))

def update_config(cfg, track):
    cfg.ExternalTrigger = False
    cfg.isExtPulseTrig  = False

    # reset
    for iv in range(8):
        cfg.ST[iv] = []

    # pulse
    for (bo, vmm, ch) in track:
        if bo == cfg.ip:
            cfg.ST[vmm] = [ch]

    # mask
    cfg.SM = {}
    for vmm in range(8):
        cfg.SM[vmm] = []
        for ch in range(1,65):
            if vmm in cfg.ST and (ch not in cfg.ST[vmm]):
                cfg.SM[vmm].append(ch)
            elif vmm not in cfg.ST:
                cfg.SM[vmm].append(ch)

def newcal(gui, mmfei, vmmis, ThresholdDACs, TestPulseDAC, PeakingTime,
           SM, ST, EnableReadout, ConfigureLoad, 
           ip, ExternalTrigger, isExtPulseTrig, mon):   

    nvmms     = 8 
    nchannels = 64
    from vmm     import registers
    from channel import index
    colors = ["", palette.BLUE, palette.GREEN, palette.RED]

    # set mmfe number
    gui.combo_mmfe_number.set_active(mmfei)
    gui.set_current_mmfe(gui.combo_mmfe_number)
    gui.entry_ip.set_text("192.168.0." + str(ip)) 
    gui.set_ip(gui.entry_ip)

    text = "Board %s :: [%s / %s]" % (str(ip), mmfei+1, sys.argv[1])
    color = colors[mmfei % len(colors)]
    mmfe  = color+palette.BOLD+text+palette.END
    announce(" %s with VMMs %s" % (mmfe, vmmis))

    # vmm loop
    for vmmi in vmmis:

        announce(" %s VMM %s" % (mmfe, vmmi))

        # set vmm number
        gui.vmm_number_combo.set_active(vmmi)
        gui.set_current_vmm(gui.vmm_number_combo)

        # set monitor output
        if mon and vmmi in mon:
            announce(" %s VMM %s, MON %s " % (mmfe, vmmi, mon[vmmi]))
            gui.vmm_sm_menu.set_active(mon[vmmi] - 1)

        # set Threshold DAC
        announce(" %s VMM %s, THDAC %s" % (mmfe, vmmi, ThresholdDACs[vmmi]))
        gui.vmm_sdt_menu.set_active(ThresholdDACs[vmmi])
        gui.vmm_callback_word(gui.vmm_sdt_menu, registers.SDT, registers.bits_SDT)

        # set Test Pulse DAC
        if TestPulseDAC:
            announce(" %s VMM %s, TPDAC %s" % (mmfe, vmmi, TestPulseDAC))
            gui.vmm_sdp2_menu.set_active(TestPulseDAC)
            gui.vmm_callback_word(gui.vmm_sdp2_menu, registers.SDP2, registers.bits_SDP2)
        else:
            announce(" %s VMM %s, TPDAC ignored" % (mmfe, vmmi))

        if PeakingTime:
            announce(" %s VMM %s, pktime %s" % (mmfe, vmmi, PeakingTime))
            gui.vmm_st_menu.set_active(PeakingTime)
            gui.vmm_callback_word(gui.vmm_st_menu, registers.ST, registers.bits_ST)
        else:
            announce(" %s VMM %s, pktime ignored" % (mmfe, vmmi))

        # set test pulse channels
        if ST and vmmi in ST:
            for channel in ST[vmmi]:
                announce(" %s VMM %s, pulse CH %2s" % (mmfe, vmmi, channel))
                gui.channel_ST[channel-1].set_active(1)
                gui.channel_callback_bit(gui.channel_ST[channel-1], channel-1, index.ST)
        else:
            announce(" %s VMM %s, pulse nothing" % (mmfe, vmmi))

        # unmask everything, then set masked channels
        announce(" %s VMM %s, unmask everything" % (mmfe, vmmi))
        for channel in range(nchannels):
            gui.channel_SM[channel-1].set_active(0)
            gui.channel_callback_bit(gui.channel_SM[channel-1], channel-1, index.SM)
        if not vmmi in SM or not SM[vmmi]:
            announce(" %s VMM %s, mask nothing" % (mmfe, vmmi))
        else:
            for channel in SM[vmmi]:
                announce(" %s VMM %s, mask CH %2s" % (mmfe, vmmi, channel))
                gui.channel_SM[channel-1].set_active(1)
                gui.channel_callback_bit(gui.channel_SM[channel-1], channel-1, index.SM)
            
    # enable readout
    for choice in EnableReadout:
        announce(" %s VMM %s, enable readout" % (mmfe, choice))
        gui.vmm_readout_buttons[choice].set_active(1)
        gui.readout_vmm_callback(gui.vmm_readout_buttons[choice], choice)
    if not EnableReadout:
        announce(" %s readout no VMMs" % (mmfe))

    # load it
    announce(" %s load readout" % (mmfe))
    gui.vmm_load_readout(gui.vmm_readout_button)

    # configure and Load
    for choice in ConfigureLoad:
        announce(" %s VMM %s, configure and load" % (mmfe, choice))
        gui.vmm_load_buttons[choice].set_active(1)
        gui.load_vmm_callback(gui.vmm_load_buttons[choice], choice)
    if not ConfigureLoad:
        announce(" %s configure/load no VMMs" % (mmfe))

    # load it
    announce(" %s load config" % (mmfe))
    gui.vmm_load_configs(gui.vmm_load_button)

    # set internal trigger/external trigger/external trigger with pulse
    if ExternalTrigger:
        announce(" %s enable external trigger" % (mmfe))
        gui.button_external_trigger.clicked()
        if isExtPulseTrig:
            announce(" %s enable external trigger w/pulse" % (mmfe))
            gui.button_external_trigger_pulse.clicked()

def announce(message):
    print message

class palette:
    BLUE      = "\033[94m"
    GREEN     = "\033[92m"
    RED       = "\033[91m"
    END       = "\033[0m"
    BOLD      = "\033[1m"

if __name__ == "__main__":
    main()


